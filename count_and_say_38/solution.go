package count_and_say_38

import "strings"

// countAndSay generates the nth term of the count-and-say sequence.
// The sequence starts with "1". Each subsequent term is generated by
// describing the previous term.
// For example:
// 1.     1
// 2.     11 (one 1)
// 3.     21 (two 1s)
// 4.     1211 (one 2, one 1)
// 5.     111221 (one 1, one 2, two 1s)
// Constraints: 1 <= n <= 30.
func countAndSay(n int) string {
	if n < 1 || n > 30 {
		return ""
	}

	result := []byte("1")
	for i := 1; i < n; i++ {
		var builder strings.Builder
		builder.Grow(len(result) * 2)

		currentChar := result[0]
		currentCount := 1

		for j := 1; j < len(result); j++ {
			if result[j] == currentChar {
				currentCount++
			} else {
				builder.WriteByte(byte(currentCount + '0'))
				builder.WriteByte(currentChar)
				currentChar = result[j]
				currentCount = 1
			}
		}

		builder.WriteByte(byte(currentCount + '0'))
		builder.WriteByte(currentChar)

		result = []byte(builder.String())
	}

	return string(result)
}
